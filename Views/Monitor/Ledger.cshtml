
@section script
{
    <script>
        var poolData = @Html.Raw(Json.Serialize(Model));
        const numPerPage = 50;
        var vm = new Vue({
            el: "#app",
            data: {
                net: M_NET,
                blockId: "@ViewData["blockId"]",
                pool: poolData.info,
                page: @ViewData["page"],
                haveNextPage: false,
                lastPage: 1,
                transactions: poolData.transactions,
                loading: false,
                loading_t: false,
                numStr: ''
            },
            methods: {
                getPoolData: function() {
                    this.loading = true;
                    $.get(`${M_API}/PoolData/${this.blockId}`)
                        .done(function(data) {
                            if (data.found === true) {
                                vm.pool = data.info;
                                vm.lastPage = Math.ceil(data.info.txCount / numPerPage);
                                if (vm.lastPage === 0) vm.lastPage = 1;
                                vm.getTransactions(vm.page);
                            } else
                                window.location.href = `${M_NET}/monitor/notfound/${vm.blockId}`;
                        })
                        .always(function() {
                            vm.loading = false;
                        });
                },
                getTransactions: function(p) {
                    if (p > this.lastPage) p = this.lastPage;
                    this.loading_t = true;
                    $.get(`${M_API}/PoolTransactions?hash=${this.blockId}&page=${p}`)
                        .done(function(data) {
                            vm.transactions = data.transactions;
                            vm.page = p;
                            vm.haveNextPage = p < vm.lastPage;
                            if (data.transactions.length > 0) {
                                var offset = (p - 1) * numPerPage;
                                vm.numStr = `${offset + 1} - ${offset + data.transactions.length} of ${vm.pool.txCount}`;
                            } else vm.numStr = '0';
                        })
                        .always(function() {
                            vm.loading_t = false;
                        });
                }
            },
            created: function() {
                this.getPoolData();
            }
        });
    </script>
}

<div v-show="loading" class="padding_top_60 p_bot20">
    <div class="loader"></div>
</div>
<div v-show="!loading" class="content std">
    <h1 class="main_title padding_top_60 p_bot20">Block of transactions</h1>
    <div class="subtitle_line">
        <span class="suttext p_bot20">The information about transactions in the block</span>
    </div>
</div>
<div v-show="!loading" class="content padding_top_10">
    <div class="whitepanel">
        <div class="block_stat grey_line_bottom">
            <div class="type">
                <div class="active">Information</div>
            </div>
        </div>       
        <table>
            <thead>
            <tr></tr>
            </thead>
            <tbody>
            <tr>
                <td>Number:</td>
                <td>{{pool.number}}</td>
            </tr>
            <tr>
                <td>Hash:</td>
                <td class="crop_text">{{pool.hash}}</td>
            </tr>
            <tr>
                <td>Status:</td>
                <td class="success">Success</td>
            </tr>
            <tr>
                <td>Time stamp:</td>
                <td>{{new Date(pool.time).toLocaleString()}}</td>
            </tr>
            <tr>
                <td>Txs count:</td>
                <td>{{pool.txCount}}</td>
            </tr>
            </tbody>
        </table>
    </div>
</div>

<div class="content std">
    <h2 class="main_title padding_top_60 p_bot20">List of transactions</h2>
    <div class="subtitle_line">
        <span class="suttext p_bot20">Transactions: {{numStr}}</span>
        <pager :page="page" :getfn="getTransactions" :next="haveNextPage" :last="lastPage"></pager>
    </div>
    <transactions :network="net" :source="transactions"></transactions>    
    <div class="loader" v-show="loading_t"></div>
    <div class="padding_bottom_60">
        <pager :page="page" :getfn="getTransactions" :next="haveNextPage" :last="lastPage"></pager>
    </div>
</div>
