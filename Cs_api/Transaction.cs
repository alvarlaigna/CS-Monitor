/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Transaction : TBase
{
  private string _hash;
  private string _innerId;
  private string _source;
  private string _target;
  private Amount _amount;
  private string _currency;

  public string Hash
  {
    get
    {
      return _hash;
    }
    set
    {
      __isset.hash = true;
      this._hash = value;
    }
  }

  public string InnerId
  {
    get
    {
      return _innerId;
    }
    set
    {
      __isset.innerId = true;
      this._innerId = value;
    }
  }

  public string Source
  {
    get
    {
      return _source;
    }
    set
    {
      __isset.source = true;
      this._source = value;
    }
  }

  public string Target
  {
    get
    {
      return _target;
    }
    set
    {
      __isset.target = true;
      this._target = value;
    }
  }

  public Amount Amount
  {
    get
    {
      return _amount;
    }
    set
    {
      __isset.amount = true;
      this._amount = value;
    }
  }

  public string Currency
  {
    get
    {
      return _currency;
    }
    set
    {
      __isset.currency = true;
      this._currency = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool hash;
    public bool innerId;
    public bool source;
    public bool target;
    public bool amount;
    public bool currency;
  }

  public Transaction() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Hash = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              InnerId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Source = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Target = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              Amount = new Amount();
              Amount.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Currency = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Transaction");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Hash != null && __isset.hash) {
        field.Name = "hash";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Hash);
        oprot.WriteFieldEnd();
      }
      if (InnerId != null && __isset.innerId) {
        field.Name = "innerId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(InnerId);
        oprot.WriteFieldEnd();
      }
      if (Source != null && __isset.source) {
        field.Name = "source";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Source);
        oprot.WriteFieldEnd();
      }
      if (Target != null && __isset.target) {
        field.Name = "target";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Target);
        oprot.WriteFieldEnd();
      }
      if (Amount != null && __isset.amount) {
        field.Name = "amount";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        Amount.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Currency != null && __isset.currency) {
        field.Name = "currency";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Currency);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Transaction(");
    bool __first = true;
    if (Hash != null && __isset.hash) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Hash: ");
      __sb.Append(Hash);
    }
    if (InnerId != null && __isset.innerId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("InnerId: ");
      __sb.Append(InnerId);
    }
    if (Source != null && __isset.source) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Source: ");
      __sb.Append(Source);
    }
    if (Target != null && __isset.target) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Target: ");
      __sb.Append(Target);
    }
    if (Amount != null && __isset.amount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Amount: ");
      __sb.Append(Amount== null ? "<null>" : Amount.ToString());
    }
    if (Currency != null && __isset.currency) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Currency: ");
      __sb.Append(Currency);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

